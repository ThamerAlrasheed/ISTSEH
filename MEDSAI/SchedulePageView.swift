import SwiftUI

/// Calendar page:
/// - Top: calendar selector
/// - Then: Appointments (read-only) for the selected day (with edit/delete menu)
/// - Then: Doses (read-only) for the selected day, generated by the advanced Scheduler
///
/// If there are no doses, we show only "No doses" and hide appointments (per your rule).
/// If there are no appointments (and doses exist), we show a centered "Add appointment" pill button.
struct SchedulePageView: View {
    @EnvironmentObject var settings: AppSettings

    // Medications (same repo used by Today)
    @StateObject private var repo = UserMedsRepo()

    // Appointments Firestore repo
    @StateObject private var appts = AppointmentsRepo()

    // Selected calendar day
    @State private var selectedDate: Date = Date()

    // Read-only list of (time, LocalMed) pairs for the day
    @State private var dayDoses: [(Date, LocalMed)] = []

    // Sheets
    @State private var showAddAppointment = false
    @State private var editingAppointment: Appointment? = nil // presented via .sheet(item:)

    var body: some View {
        NavigationStack {
            VStack(spacing: 0) {

                // Calendar picker
                CalendarView(selection: $selectedDate, initialMode: .monthly)
                    .padding(.bottom, 8)
                    .background(Color(.systemBackground))

                Divider()

                List {
                    // If no doses, show ONLY "No doses" and exit early (hide appointments)
                    if dayDoses.isEmpty {
                        Section {
                            ContentUnavailableView("No doses on this day",
                                                   systemImage: "calendar.badge.exclamationmark")
                        } header: {
                            Text(sectionTitle("Doses"))
                        }
                    } else {
                        // Appointments FIRST
                        appointmentsSection

                        // Then Doses
                        dosesSection
                    }
                }
                .listStyle(.insetGrouped)
            }
            .navigationTitle("Calendar")
            .onAppear {
                repo.start()
                appts.start()
                recomputeDoses()
            }
            .onChange(of: selectedDate) { _, _ in recomputeDoses() }
            .onChange(of: repo.meds) { _, _ in recomputeDoses() }
            .onChange(of: settings.breakfast) { _, _ in recomputeDoses() }
            .onChange(of: settings.lunch)     { _, _ in recomputeDoses() }
            .onChange(of: settings.dinner)    { _, _ in recomputeDoses() }
            .onChange(of: settings.bedtime)   { _, _ in recomputeDoses() }
            .onChange(of: settings.wakeup)    { _, _ in recomputeDoses() }
            // Add sheet
            .sheet(isPresented: $showAddAppointment) {
                AddAppointmentView(repo: appts, defaultDate: selectedDate, existing: nil)
            }
            // Edit sheet (uses Appointment as Identifiable)
            .sheet(item: $editingAppointment) { appt in
                AddAppointmentView(repo: appts, defaultDate: selectedDate, existing: appt)
            }
        }
    }

    // MARK: - Appointments section (above doses)

    @ViewBuilder
    private var appointmentsSection: some View {
        Section {
            let items = appts.appointments(on: selectedDate)
            if appts.isLoading {
                HStack {
                    ProgressView()
                    Text("Loading appointments…")
                }
            } else if let err = appts.errorMessage {
                ContentUnavailableView("Couldn't load appointments",
                                       systemImage: "exclamationmark.triangle",
                                       description: Text(err))
            } else if items.isEmpty {
                VStack(alignment: .center, spacing: 10) {
                    Text("No appointments on this day.")
                        .foregroundStyle(.secondary)

                    // Centered, perfectly centered text inside the green pill
                    HStack {
                        Spacer()
                        CenteredPillButton(title: "Add appointment") {
                            showAddAppointment = true
                        }
                        .frame(maxWidth: 260)
                        Spacer()
                    }
                }
                .padding(.vertical, 6)
            } else {
                ForEach(items) { appt in
                    HStack(alignment: .top, spacing: 12) {
                        // Left block: title + optional fields
                        VStack(alignment: .leading, spacing: 2) {
                            Text(appt.titleWithEmoji)
                                .font(.headline)
                            if let loc = appt.location, !loc.isEmpty {
                                Text(loc).foregroundStyle(.secondary)
                            }
                            if let notes = appt.notes, !notes.isEmpty {
                                Text(notes)
                                    .font(.footnote)
                                    .foregroundStyle(.secondary)
                                    .lineLimit(2)
                            }
                        }

                        Spacer()

                        // Time
                        Text(timeOnly(appt.date))
                            .font(.headline)
                            .monospacedDigit()

                        // 3-dot menu
                        Menu {
                            Button {
                                editingAppointment = appt
                            } label: {
                                Label("Edit", systemImage: "pencil")
                            }

                            Button(role: .destructive) {
                                Task { await appts.delete(appt) }
                            } label: {
                                Label("Delete", systemImage: "trash")
                            }
                        } label: {
                            Image(systemName: "ellipsis.circle")
                                .font(.title3)
                                .foregroundStyle(.secondary)
                                .padding(.leading, 4)
                                .contentShape(Rectangle())
                        }
                        .buttonStyle(.plain)
                    }
                    .padding(.vertical, 4)
                }

                // Centered "Add appointment" pill under list
                HStack {
                    Spacer()
                    CenteredPillButton(title: "Add appointment") {
                        showAddAppointment = true
                    }
                    .frame(maxWidth: 260)
                    Spacer()
                }
                .padding(.top, 4)
            }
        } header: {
            Text(sectionTitle("Appointments"))
        }
    }

    // MARK: - Doses section (read-only)

    @ViewBuilder
    private var dosesSection: some View {
        Section {
            if repo.isLoading {
                HStack {
                    ProgressView()
                    Text("Loading medications…")
                }
            } else if let err = repo.errorMessage {
                ContentUnavailableView("Couldn't load medications",
                                       systemImage: "exclamationmark.triangle",
                                       description: Text(err))
            } else {
                ForEach(dayDoses.indices, id: \.self) { i in
                    let (time, med) = dayDoses[i]
                    HStack {
                        VStack(alignment: .leading, spacing: 2) {
                            Text(med.name)
                                .font(.headline)
                            Text("\(med.dosage) • \(foodRuleLabel(med.foodRule))")
                                .font(.subheadline)
                                .foregroundStyle(.secondary)
                        }
                        Spacer()
                        Text(time.formatted(date: .omitted, time: .shortened))
                            .font(.headline)
                            .monospacedDigit()
                    }
                    .padding(.vertical, 4)
                }
            }
        } header: {
            Text(sectionTitle("Doses"))
        }
    }

    // MARK: - Build Doses for selected day (READ-ONLY)

    private func recomputeDoses() {
        guard repo.isSignedIn else {
            dayDoses = []
            return
        }

        let active = repo.meds.filter { med in
            guard !med.isArchived else { return false }
            return (med.startDate ... med.endDate).contains(selectedDate)
        }
        if active.isEmpty {
            dayDoses = []
            return
        }

        // Adapt LocalMed -> Medication (keep SAME IDs)
        let adapted: [Medication] = active.map { m in
            Medication(
                id: m.id,
                name: m.name,
                dosage: m.dosage,
                frequencyPerDay: m.frequencyPerDay,
                startDate: m.startDate,
                endDate: m.endDate,
                foodRule: m.foodRule,
                notes: m.notes,
                ingredients: m.ingredients,
                minIntervalHours: m.minIntervalHours
            )
        }

        let pairs = Scheduler.buildAdherenceSchedule(
            meds: adapted,
            settings: settings,
            date: selectedDate
        )

        let byId: [String: LocalMed] = Dictionary(uniqueKeysWithValues: active.map { ($0.id, $0) })
        let display: [(Date, LocalMed)] = pairs.compactMap { (t, med) in
            guard let local = byId[med.id] else { return nil }
            return (t, local)
        }
        dayDoses = display.sorted { $0.0 < $1.0 }
    }

    // MARK: - Formatting helpers

    private func sectionTitle(_ base: String) -> String {
        let df = DateFormatter()
        df.dateStyle = .full
        df.timeStyle = .none
        return "\(base) – \(df.string(from: selectedDate))"
    }

    private func foodRuleLabel(_ rule: FoodRule) -> String {
        switch rule {
        case .beforeFood: return "Before food"
        case .afterFood:  return "After food"
        case .none:       return "No food rule"
        }
    }

    private func timeOnly(_ date: Date) -> String {
        date.formatted(date: .omitted, time: .shortened)
    }
}

// MARK: - Perfectly-centered green pill button
private struct CenteredPillButton: View {
    let title: String
    let action: () -> Void

    var body: some View {
        Button(action: action) {
            Text(title)
                .font(.headline)
                .foregroundColor(.white)
                .frame(minWidth: 160, maxWidth: .infinity, minHeight: 44, maxHeight: 44)
                .contentShape(Rectangle())
        }
        .background(Color.accentColor)
        .clipShape(RoundedRectangle(cornerRadius: 12, style: .continuous))
        .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
    }
}
